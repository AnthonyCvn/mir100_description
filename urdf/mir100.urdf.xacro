<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="mir100">

<xacro:include filename="$(find mir100_description)/urdf/wheel.urdf.xacro" /> 
  
<!--                          PROPERTY LIST                         -->
<!-- Robot's dimensions -->
<xacro:property name="body_height" value="0.270" />
<xacro:property name="body_width" value="0.550" />
<xacro:property name="body_len" value="0.900" />
<xacro:property name="robot_height" value="0.350" />

<!-- Castor wheels -->
<xacro:property name="base_x_origin_to_castorwheel_origin" value="0.310" />
<xacro:property name="base_y_origin_to_castorwheel_origin" value="${base_y_origin_to_wheel_origin}" />

<!-- Motor wheels -->
<xacro:property name="motor_wheel_radius" value="0.03" /> 
<xacro:property name="motor_wheel_epsilon" value="0.0001" /> 
<xacro:property name="castor_wheel_radius" value="0.03" /> 
<xacro:property name="wheel_thickness" value="0.03" />
<xacro:property name="wheel_ext_s2s_distance" value="0.480" />
<xacro:property name="base_x_origin_to_wheel_origin" value="0.0" />
<xacro:property name="base_y_origin_to_wheel_origin" value="${(wheel_ext_s2s_distance-wheel_thickness)/2}" />
<xacro:property name="base_z_origin_to_wheel_origin" value="${motor_wheel_radius-robot_height}" />

<!-- Differential driver parameters -->
<xacro:property name="wheel_separation" value="${(wheel_ext_s2s_distance-wheel_thickness)}" />
<xacro:property name="wheel_radius" value="${motor_wheel_epsilon + motor_wheel_epsilon}" />

<!-- All mass in kg-->
<xacro:property name="motor_wheel_mass" value="1" />
<xacro:property name="castor_wheel_mass" value="1" />
<xacro:property name="body_mass" value="67" />

<!-- Friction-->
<xacro:property name="coulomb_friction_first_direction" value="0.01" />
<xacro:property name="coulomb_friction_second_direction" value="0.01" />



<!--                    MATERIAL DEFINITION                         -->
<material name="black">
	<color rgba="0 0 0 1"/>
</material>

<material name="white">
	<color rgba="1 1 1 1"/>
</material>

<material name="blue">
	<color rgba="0 0 0.8 1"/>
</material>

<!--                    INERTIA MACRO                              -->
<xacro:macro name="cylinder_inertia" params="m r h">
  <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
              iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
              izz="${m*r*r/2}" /> 
</xacro:macro>

<xacro:macro name="box_inertia" params="m x y z">
  <inertia  ixx="${m*(y*y+z*z)/12}" ixy = "0" ixz = "0"
            iyy="${m*(x*x+z*z)/12}" iyz = "0"
            izz="${m*(x*x+z*z)/12}" /> 
</xacro:macro>

<xacro:macro name="default_inertial" params="mass">
  <inertial>
    <mass value="${mass}" />
    <inertia ixx="1.0" ixy="0.0" ixz="0.0" 
             iyy="1.0" iyz="0.0"
             izz="1.0" />
  </inertial>
</xacro:macro>

<!--                    BASE FOOTPRINT                             -->
<!-- Link that is on the ground right below base_link origin  -->
<link name="base_footprint">
  <inertial>
    <mass value="0.0001" />
    <origin xyz="0 0 0" />
    <inertia 
      ixx="0.0001" ixy="0.0" ixz="0.0"
      iyy="0.0001" iyz="0.0" 
      izz="0.0001" />
  </inertial>
  <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
          <box size="0.001 0.001 0.001" />
      </geometry>
  </visual>
</link>

<gazebo reference="base_footprint">
  <turnGravityOff>false</turnGravityOff>
</gazebo>
  
<!--                    BASE LINK                                 -->
<link name="base_link">
	<visual>


      <geometry>
        <mesh filename="package://mir100_description/meshes/body.dae"/>
      </geometry>
<!--
			<geometry>
				<box size="${body_len} ${body_width} ${body_height}"/>
			</geometry>
-->
			<origin rpy="0 0 0" xyz="0 0 -${body_height/2}"/>
	
	</visual>
	<collision>
		<geometry>
			<box size="${body_len} ${body_width} ${body_height}"/>
		</geometry>
		<origin rpy="0 0 0" xyz="0 0 -${body_height/2}"/>
	</collision>
	<inertial>
		<mass value="${body_mass}"/>
    <origin xyz="0 0 -${body_height/2}" /> <!-- center of gravity relative to the link's reference frame). -->
		<box_inertia  m="${body_mass}" x="${body_len}" y="${body_width}" z="${body_height}" />
	</inertial>
</link>

<joint name="base_footprint_joint" type="fixed">
  <origin xyz="0 0 ${robot_height}" rpy="0 0 0" />
  <parent link="base_footprint"/>
  <child link="base_link" />
</joint>

<gazebo reference="base_link">
	<turnGravityOff>false</turnGravityOff>
</gazebo>



<!--                    MOTOR WHEELS                             -->
<wheel lr="left" parent="base_link" translateX="0" translateY="1" flipY="1"/>
<wheel lr="right" parent="base_link" translateX="0" translateY="-1" flipY="1"/>

<!--                    CASTOR WHEELS                            -->
<!-- Left front -->
<link name="left_front_castor_wheel">
  <visual>
    <geometry>
      <sphere radius="${castor_wheel_radius}"/>
    </geometry>
    <material name="white"/>
  </visual>
  <collision>
    <geometry>
      <sphere radius="${castor_wheel_radius}" />
    </geometry>
  </collision>
  <xacro:default_inertial mass="${castor_wheel_mass}"/>
</link>

<joint name="base_to_left_front_castor_wheel" type="fixed">
  <parent link="base_link"/>
  <child link="left_front_castor_wheel"/>
  <origin rpy="0 0 0" xyz="${base_x_origin_to_castorwheel_origin} ${base_y_origin_to_castorwheel_origin} ${castor_wheel_radius-robot_height}"/>
</joint>

<!-- Left rear -->
<link name="left_rear_castor_wheel">
  <visual>
    <geometry>
      <sphere radius="${castor_wheel_radius}"/>
    </geometry> 
    <material name="white"/>
  </visual>
  <collision>
    <geometry>
      <sphere radius="${castor_wheel_radius}" />
    </geometry>
  </collision>
  <xacro:default_inertial mass="${castor_wheel_mass}"/>
</link>

<joint name="base_to_left_rear_castor_wheel" type="fixed">
  <parent link="base_link"/>
  <child link="left_rear_castor_wheel"/>
  <origin rpy="0 0 0" xyz="-${base_x_origin_to_castorwheel_origin} ${base_y_origin_to_castorwheel_origin} ${castor_wheel_radius-robot_height}"/>
</joint>

<!-- Right front -->
<link name="right_front_castor_wheel">
  <visual>
    <geometry>
      <sphere radius="${castor_wheel_radius}"/>
    </geometry> 
    <material name="white"/>
  </visual> 
  <collision>
    <geometry>
      <sphere radius="${castor_wheel_radius}" />
    </geometry>
  </collision>
  <xacro:default_inertial mass="${castor_wheel_mass}"/>
</link>

<joint name="base_to_right_front_castor_wheel" type="fixed">
  <parent link="base_link"/>
  <child link="right_front_castor_wheel"/>
  <origin rpy="0 0 0" xyz="${base_x_origin_to_castorwheel_origin} -${base_y_origin_to_castorwheel_origin} ${castor_wheel_radius-robot_height}"/>
</joint>

<!-- Left rear -->
<link name="right_rear_castor_wheel">
  <visual>
    <geometry>
      <sphere radius="${castor_wheel_radius}"/>
    </geometry>
    <material name="white"/>
  </visual>
  <collision>
    <geometry>
      <sphere radius="${castor_wheel_radius}" />
    </geometry>
  </collision>
  <xacro:default_inertial mass="${castor_wheel_mass}"/>
</link>

<joint name="base_to_right_rear_castor_wheel" type="fixed">
  <parent link="base_link"/>
  <child link="right_rear_castor_wheel"/>
  <origin rpy="0 0 0" xyz="-${base_x_origin_to_castorwheel_origin} -${base_y_origin_to_castorwheel_origin} ${castor_wheel_radius-robot_height}"/>
</joint>

<!--                    GAZEBO FRICTION                                  -->
<gazebo reference="base_link">
  <mu1>${coulomb_friction_first_direction}</mu1>
  <mu2>${coulomb_friction_second_direction}</mu2>
  <material>Gazebo/white</material>
</gazebo>
<gazebo reference="left_front_castor_wheel">
  <mu1>${coulomb_friction_first_direction}</mu1>
  <mu2>${coulomb_friction_second_direction}</mu2>
  <material>Gazebo/Black</material>
</gazebo>
<gazebo reference="right_front_castor_wheel">
  <mu1>${coulomb_friction_first_direction}</mu1>
  <mu2>${coulomb_friction_second_direction}</mu2>
  <material>Gazebo/Black</material>
</gazebo>
<gazebo reference="left_rear_castor_wheel">
  <mu1>${coulomb_friction_first_direction}</mu1>
  <mu2>${coulomb_friction_second_direction}</mu2>
  <material>Gazebo/Black</material>
</gazebo>
<gazebo reference="right_rear_castor_wheel">
  <mu1>${coulomb_friction_first_direction}</mu1>
  <mu2>${coulomb_friction_second_direction}</mu2>
  <material>Gazebo/Black</material>
</gazebo>


<!--                    GAZEBO PLUGIN ROS CONTROL                        -->
<gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
    <!-- no robotNamespace>/</robotNamespace> for multi-robobt integration -->
  </plugin>

  <!-- Publish real pose of the robot -->
  <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
    <alwaysOn>true</alwaysOn>
    <updateRate>50.0</updateRate>
    <bodyName>base_footprint</bodyName>
    <topicName>ground_truth/state</topicName>
    <gaussianNoise>0.01</gaussianNoise>
    <frameName>world</frameName>
    <xyzOffsets>0 0 0</xyzOffsets>
    <rpyOffsets>0 0 0</rpyOffsets>
  </plugin>
</gazebo>


</robot>